// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231123182336_addedmoreproperties")]
    partial class addedmoreproperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Data.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NewsId"));

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("published")
                        .HasColumnType("date");

                    b.Property<string>("subtitle")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NewsId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            NewsId = 1,
                            description = "Desc Test",
                            published = new DateOnly(2024, 1, 1),
                            title = "News 1"
                        },
                        new
                        {
                            NewsId = 2,
                            description = "Desc Test",
                            published = new DateOnly(2024, 1, 1),
                            title = "News 2"
                        },
                        new
                        {
                            NewsId = 3,
                            description = "Desc Test",
                            published = new DateOnly(2024, 1, 1),
                            title = "News 3"
                        });
                });

            modelBuilder.Entity("API.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("addedon")
                        .HasColumnType("date");

                    b.Property<int?>("barcode")
                        .HasColumnType("integer");

                    b.Property<string>("category")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("descriptionbullets")
                        .HasColumnType("text");

                    b.Property<int?>("discount")
                        .HasColumnType("integer");

                    b.Property<string[]>("images")
                        .HasColumnType("text[]");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("price")
                        .HasColumnType("integer");

                    b.Property<int?>("sells")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("41eab0cc-08fc-43bb-84a9-977186e67a9d"),
                            description = "Desc Test",
                            name = "Product 1",
                            price = 500
                        },
                        new
                        {
                            ProductId = new Guid("705abb70-d8ab-4012-b4f0-2e6cc8bcab14"),
                            description = "Desc Test",
                            name = "Product 2",
                            price = 500
                        },
                        new
                        {
                            ProductId = new Guid("26a5532d-c9c1-40a9-a81e-5d8d78386e54"),
                            description = "Desc Test",
                            name = "Product 3",
                            price = 500
                        },
                        new
                        {
                            ProductId = new Guid("f3d2ed66-8972-42bc-89d4-59303a95ac29"),
                            description = "Desc Test",
                            name = "Product 4",
                            price = 500
                        },
                        new
                        {
                            ProductId = new Guid("2cdd1f5b-d448-4204-b43a-44406c04f08e"),
                            description = "Desc Test",
                            name = "Product 5",
                            price = 500
                        },
                        new
                        {
                            ProductId = new Guid("75d37063-512f-4c36-ad7a-f08f1433059c"),
                            description = "Desc Test",
                            name = "Product 6",
                            price = 500
                        },
                        new
                        {
                            ProductId = new Guid("ce7f7079-94a6-44b2-b2d9-761622aa19b8"),
                            description = "Desc Test",
                            name = "Product 7",
                            price = 500
                        },
                        new
                        {
                            ProductId = new Guid("712e5618-e3d7-4ab9-8477-b8616aa3fce0"),
                            description = "Desc Test",
                            name = "Product 8",
                            price = 500
                        });
                });

            modelBuilder.Entity("API.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("hashedpassword")
                        .HasColumnType("text");

                    b.Property<string>("pass_salt")
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("usertype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8627a7c7-b55e-47c7-8ad5-39f20c83fd94"),
                            username = "admintest",
                            usertype = "admin"
                        },
                        new
                        {
                            UserId = new Guid("9a6e62c3-c15b-4519-a74d-c2ae7e7ffcb1"),
                            username = "usertest",
                            usertype = "user"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
